// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: restaurants.sql

package database

import (
	"context"
	"time"
)

const getAllRestaurants = `-- name: GetAllRestaurants :many
SELECT id, name, image_url, average_rating, created_at, updated_at FROM restaurants
`

func (q *Queries) GetAllRestaurants(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, getAllRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.AverageRating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRestaurantsWithCategories = `-- name: GetAllRestaurantsWithCategories :many
SELECT restaurants.id as restaurant_id,
restaurants.name as restaurant_name,
restaurants.image_url as restaurant_image_url,
restaurants.average_rating as restaurant_average_rating,
restaurants.created_at as restaurant_created_at,
restaurants.updated_at as restaurant_updated_at,
restaurant_categories.id as restaurant_category_id,
restaurant_categories.name as restaurant_category_name,
restaurant_categories.created_at as restaurant_category_created_at,
restaurant_categories.updated_at as restaurant_category_updated_at 
FROM restaurants 
INNER JOIN restaurant_categories_has_restaurants
ON restaurants.id = restaurant_categories_has_restaurants.restaurant_id
INNER JOIN restaurant_categories
ON restaurant_categories.id = restaurant_categories_has_restaurants.restaurant_category_id
`

type GetAllRestaurantsWithCategoriesRow struct {
	RestaurantID                int64
	RestaurantName              string
	RestaurantImageUrl          string
	RestaurantAverageRating     string
	RestaurantCreatedAt         time.Time
	RestaurantUpdatedAt         time.Time
	RestaurantCategoryID        int64
	RestaurantCategoryName      string
	RestaurantCategoryCreatedAt time.Time
	RestaurantCategoryUpdatedAt time.Time
}

func (q *Queries) GetAllRestaurantsWithCategories(ctx context.Context) ([]GetAllRestaurantsWithCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllRestaurantsWithCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRestaurantsWithCategoriesRow
	for rows.Next() {
		var i GetAllRestaurantsWithCategoriesRow
		if err := rows.Scan(
			&i.RestaurantID,
			&i.RestaurantName,
			&i.RestaurantImageUrl,
			&i.RestaurantAverageRating,
			&i.RestaurantCreatedAt,
			&i.RestaurantUpdatedAt,
			&i.RestaurantCategoryID,
			&i.RestaurantCategoryName,
			&i.RestaurantCategoryCreatedAt,
			&i.RestaurantCategoryUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResturantWithFoodCategoryAndFoodItems = `-- name: GetResturantWithFoodCategoryAndFoodItems :many
SELECT r.id as restaurant_id, 
    r.name as restaurant_name,
    r.image_url as restaurant_image_url,
    r.average_rating as restaurant_average_rating, 
    r.created_at as restaurant_created_at,
    r.updated_at as restaurant_updated_at,
    fi.id as food_item_id, 
    fi.name as food_item_name, 
    fi.image_url as food_item_image_url,
    fi.description as food_item_description,
    fi.price as food_item_price,
    fi.created_at as food_item_created_at,
    fi.updated_at as food_item_updated_at,
    fc.id as food_category_id, 
    fc.name as food_category_name,
    fc.created_at as food_category_created_at,
    fc.updated_at as food_category_updated_at
FROM restaurants r
INNER JOIN food_items fi
ON r.id = fi.restaurant_id
INNER JOIN food_categories fc
ON fc.id = fi.food_category_id
WHERE r.id = $1
`

type GetResturantWithFoodCategoryAndFoodItemsRow struct {
	RestaurantID            int64
	RestaurantName          string
	RestaurantImageUrl      string
	RestaurantAverageRating string
	RestaurantCreatedAt     time.Time
	RestaurantUpdatedAt     time.Time
	FoodItemID              int64
	FoodItemName            string
	FoodItemImageUrl        string
	FoodItemDescription     string
	FoodItemPrice           string
	FoodItemCreatedAt       time.Time
	FoodItemUpdatedAt       time.Time
	FoodCategoryID          int64
	FoodCategoryName        string
	FoodCategoryCreatedAt   time.Time
	FoodCategoryUpdatedAt   time.Time
}

func (q *Queries) GetResturantWithFoodCategoryAndFoodItems(ctx context.Context, id int64) ([]GetResturantWithFoodCategoryAndFoodItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getResturantWithFoodCategoryAndFoodItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResturantWithFoodCategoryAndFoodItemsRow
	for rows.Next() {
		var i GetResturantWithFoodCategoryAndFoodItemsRow
		if err := rows.Scan(
			&i.RestaurantID,
			&i.RestaurantName,
			&i.RestaurantImageUrl,
			&i.RestaurantAverageRating,
			&i.RestaurantCreatedAt,
			&i.RestaurantUpdatedAt,
			&i.FoodItemID,
			&i.FoodItemName,
			&i.FoodItemImageUrl,
			&i.FoodItemDescription,
			&i.FoodItemPrice,
			&i.FoodItemCreatedAt,
			&i.FoodItemUpdatedAt,
			&i.FoodCategoryID,
			&i.FoodCategoryName,
			&i.FoodCategoryCreatedAt,
			&i.FoodCategoryUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
