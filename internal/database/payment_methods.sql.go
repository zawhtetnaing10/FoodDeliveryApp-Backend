// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_methods.sql

package database

import (
	"context"
	"database/sql"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_methods (card_number, expiry_date, cvv, name_on_card, user_id, created_at, updated_at)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW() AT TIME ZONE 'UTC',
    NOW() AT TIME ZONE 'UTC'
)
RETURNING id, card_number, expiry_date, cvv, name_on_card, created_at, updated_at, user_id
`

type CreatePaymentMethodParams struct {
	CardNumber string
	ExpiryDate string
	Cvv        int32
	NameOnCard string
	UserID     sql.NullInt64
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, createPaymentMethod,
		arg.CardNumber,
		arg.ExpiryDate,
		arg.Cvv,
		arg.NameOnCard,
		arg.UserID,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.CardNumber,
		&i.ExpiryDate,
		&i.Cvv,
		&i.NameOnCard,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getPaymentMethodsByUser = `-- name: GetPaymentMethodsByUser :many
SELECT id, card_number, expiry_date, cvv, name_on_card, created_at, updated_at, user_id FROM payment_methods
WHERE user_id = $1
`

func (q *Queries) GetPaymentMethodsByUser(ctx context.Context, userID sql.NullInt64) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentMethodsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentMethod
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.CardNumber,
			&i.ExpiryDate,
			&i.Cvv,
			&i.NameOnCard,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
