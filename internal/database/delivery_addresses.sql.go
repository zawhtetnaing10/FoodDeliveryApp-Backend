// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: delivery_addresses.sql

package database

import (
	"context"
	"database/sql"
)

const createDeliveryAddress = `-- name: CreateDeliveryAddress :one
INSERT INTO delivery_addresses(street_address, user_id, created_at, updated_at)
VALUES (
    $1,
    $2,
    NOW() AT TIME ZONE 'UTC',
    NOW() AT TIME ZONE 'UTC'
)
RETURNING id, street_address, created_at, updated_at, user_id
`

type CreateDeliveryAddressParams struct {
	StreetAddress string
	UserID        sql.NullInt64
}

func (q *Queries) CreateDeliveryAddress(ctx context.Context, arg CreateDeliveryAddressParams) (DeliveryAddress, error) {
	row := q.db.QueryRowContext(ctx, createDeliveryAddress, arg.StreetAddress, arg.UserID)
	var i DeliveryAddress
	err := row.Scan(
		&i.ID,
		&i.StreetAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getDeliveryAddressesForUser = `-- name: GetDeliveryAddressesForUser :many
SELECT id, street_address, created_at, updated_at, user_id FROM delivery_addresses
WHERE user_id = $1
`

func (q *Queries) GetDeliveryAddressesForUser(ctx context.Context, userID sql.NullInt64) ([]DeliveryAddress, error) {
	rows, err := q.db.QueryContext(ctx, getDeliveryAddressesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryAddress
	for rows.Next() {
		var i DeliveryAddress
		if err := rows.Scan(
			&i.ID,
			&i.StreetAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
